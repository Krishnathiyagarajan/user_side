{"ast":null,"code":"// import React, { useState } from 'react';\n// import { useNavigate } from 'react-router-dom';\n// import SelectedCarDetails from './SelectedCarDetails';\n// import TripDetailsCard from '../Listpage/TripDetailsCard';\n\n// // SeatList Component\n// const SeatList = () => {\n//   const [seats, setSeats] = useState([\n//     { id: 'L1', isSelected: false, isDisabled: false, isBooked: false, price: 1200 },\n//     { id: 'R1', isSelected: false, isDisabled: true, isBooked: false, price: 1200 },\n//     { id: 'L2', isSelected: false, isDisabled: false, isBooked: false, price: 1200 },\n//     { id: 'R2', isSelected: false, isDisabled: false, isBooked: false, price: 1200 },\n//     { id: 'L3', isSelected: false, isDisabled: false, isBooked: true, price: 1200 },\n//     { id: 'R3', isSelected: false, isDisabled: false, isBooked: false, price: 1200 },\n//   ]);\n\n//   const [passengers, setPassengers] = useState({});\n//   const [mainPassenger, setMainPassenger] = useState(null);\n//   const [showModal, setShowModal] = useState(false);\n//   const [error, setError] = useState(null);\n//   const navigate = useNavigate();\n\n//   // Payment Handling\n//   const handlePayment = async () => {\n//     if (!window.Razorpay) {\n//       alert('Razorpay is not loaded properly!');\n//       return;\n//     }\n\n//     const response = await fetch('http://localhost:5000/api/payments/create-order', {\n//       method: 'POST',\n//       headers: { 'Content-Type': 'application/json' },\n//       body: JSON.stringify({ totalAmount }),\n//     });\n\n//     const order = await response.json();\n//     if (!order?.id) {\n//       alert('Failed to create order');\n//       return;\n//     }\n\n//     const options = {\n//       key: 'rzp_test_vqDlqzfsth2zPW',\n//       amount: totalAmount * 100,\n//       currency: 'INR',\n//       name: 'The CabS',\n//       description: 'Booking Details',\n//       order_id: order.id,\n//       handler: async (response) => {\n//         const paymentDetails = {\n//           paymentId: response.razorpay_payment_id,\n//           orderId: response.razorpay_order_id,\n//           signature: response.razorpay_signature,\n//           paymentDetails: {\n//             method: 'Razorpay',\n//             status: 'success',\n//             amount: totalAmount,\n//             mainPassenger: passengers[mainPassenger],\n//             seatsBooked: selectedSeats,\n//             tripDetails: {\n//               fromLocation: 'Delhi',\n//               toLocation: 'Mumbai',\n//               pickupLocation: 'Rajiv Chowk',\n//               dropLocation: 'Andheri West',\n//               dateOfTrip: new Date(),\n//             },\n//           },\n//         };\n\n//         const captureResponse = await fetch('http://localhost:5000/api/payments/capture-payment', {\n//           method: 'POST',\n//           headers: { 'Content-Type': 'application/json' },\n//           body: JSON.stringify(paymentDetails),\n//         });\n\n//         const result = await captureResponse.json();\n//         alert(result.success ? 'Payment successful' : 'Payment failed');\n//       },\n//       prefill: { name: 'Customer Name', email: 'customer@example.com', contact: '1234567890' },\n//       theme: { color: '#F37254' },\n//     };\n\n//     const rzp1 = new window.Razorpay(options);\n//     rzp1.open();\n//   };\n\n//   const handleSeatClick = (id) => {\n//     setSeats((prevSeats) =>\n//       prevSeats.map((seat) =>\n//         seat.id === id ? { ...seat, isSelected: !seat.isSelected } : seat\n//       )\n//     );\n\n//     setPassengers((prevPassengers) => {\n//       const updatedPassengers = { ...prevPassengers };\n//       if (updatedPassengers[id]) delete updatedPassengers[id];\n//       else updatedPassengers[id] = { name: '', email: '', phone: '', isMain: false };\n//       return updatedPassengers;\n//     });\n//   };\n\n//   const handleMainPassengerChange = (seatId) => {\n//     setMainPassenger((prevMain) => (prevMain === seatId ? null : seatId));\n//     setPassengers((prevPassengers) => {\n//       const updatedPassengers = { ...prevPassengers };\n//       Object.keys(updatedPassengers).forEach((id) => {\n//         updatedPassengers[id].isMain = id === seatId && seatId !== mainPassenger;\n//       });\n//       return updatedPassengers;\n//     });\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     if (!mainPassenger) {\n//       setError('There Should be an One Main Passenger ! Please Fill.');\n//       return;\n//     }\n//     setError(null);\n//     setShowModal(true);\n//   };\n\n//   const closeModal = () => {\n//     setShowModal(false);\n//     navigate('/Seats');\n//   };\n\n//   const selectedSeats = seats.filter((seat) => seat.isSelected);\n//   const totalAmount = selectedSeats.reduce((sum, seat) => sum + seat.price, 0);\n\n//   return (\n//     <>\n//     <div className=\"flex justify-center p-4 w-full\">\n//   {/* Main Container */}\n//   <div className=\"flex flex-col md:flex-row gap-8 w-[85%]\">\n//     {/* First Div */}\n//     <div className=\"flex-[7] bg-white shadow-md rounded-lg overflow-hidden\">\n//       <SelectedCarDetails />\n//     </div>\n\n//     {/* Second Div */}\n//     <div className=\"flex-[3] shadow-md rounded-lg overflow-hidden\">\n//       <TripDetailsCard />\n//       <div className=\"p-4\">\n//         <form onSubmit={handleSubmit} className=\"space-y-4\">\n//           {Object.entries(passengers).map(([seatId, passenger]) => (\n//             <div key={seatId} className=\"space-y-2\">\n//               <label\n//                 htmlFor={`name-${seatId}`}\n//                 className=\"block text-sm font-medium text-gray-700\"\n//               >\n//                 Passenger Name for Seat {seatId}\n//               </label>\n//               <input\n//                 type=\"text\"\n//                 id={`name-${seatId}`}\n//                 value={passenger.name}\n//                 onChange={(e) =>\n//                   setPassengers((prev) => ({\n//                     ...prev,\n//                     [seatId]: { ...prev[seatId], name: e.target.value },\n//                   }))\n//                 }\n//                 required\n//                 className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50\"\n//               />\n//               <label className=\"inline-flex items-center mt-2\">\n//                 <input\n//                   type=\"checkbox\"\n//                   checked={mainPassenger === seatId}\n//                   onChange={() => handleMainPassengerChange(seatId)}\n//                   className=\"form-checkbox text-blue-600\"\n//                 />\n//                 <span className=\"ml-2 text-sm text-gray-700\">\n//                   Set as Main Passenger\n//                 </span>\n//               </label>\n//               {mainPassenger === seatId && (\n//                 <div className=\"mt-2\">\n//                   <label\n//                     htmlFor={`email-${seatId}`}\n//                     className=\"block text-sm font-medium text-gray-700\"\n//                   >\n//                     Email\n//                   </label>\n//                   <input\n//                     type=\"email\"\n//                     id={`email-${seatId}`}\n//                     value={passenger.email}\n//                     onChange={(e) =>\n//                       setPassengers((prev) => ({\n//                         ...prev,\n//                         [seatId]: {\n//                           ...prev[seatId],\n//                           email: e.target.value,\n//                         },\n//                       }))\n//                     }\n//                     required\n//                     className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50\"\n//                   />\n//                   <label\n//                     htmlFor={`phone-${seatId}`}\n//                     className=\"block text-sm font-medium text-gray-700 mt-2\"\n//                   >\n//                     Phone Number\n//                   </label>\n//                   <input\n//                     type=\"tel\"\n//                     id={`phone-${seatId}`}\n//                     value={passenger.phone}\n//                     onChange={(e) =>\n//                       setPassengers((prev) => ({\n//                         ...prev,\n//                         [seatId]: {\n//                           ...prev[seatId],\n//                           phone: e.target.value,\n//                         },\n//                       }))\n//                     }\n//                     required\n//                     className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50\"\n//                   />\n//                 </div>\n//               )}\n//             </div>\n//           ))}\n\n//           {/* Error Message */}\n//           {error && (\n//             <div className=\"text-red-600 text-sm font-medium\">{error}</div>\n//           )}\n\n//           {/* No Seats Selected Message */}\n//           {selectedSeats.length === 0 && (\n//             <div className=\"bg-yellow-100 text-yellow-700 border border-yellow-400 rounded-md p-2 text-center\">\n//               Please select the seats for the trip.\n//             </div>\n//           )}\n\n//           {selectedSeats.length > 0 && (\n//             <button\n//               type=\"submit\"\n//               className=\"w-full py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n//             >\n//               Book Seats\n//             </button>\n//           )}\n//         </form>\n//       </div>\n//       <div className=\"flex-1 bg-white shadow-md rounded-lg overflow-hidden\">\n//         <div className=\"bg-gray-100 px-4 py-2\">\n//           <h2 className=\"text-lg font-semibold\">Select Seats</h2>\n//         </div>\n//         <div className=\"p-4\">\n//           <div className=\"grid grid-rows-3 grid-cols-2 gap-4\">\n//             {seats.map((seat) => (\n//               <div key={seat.id} className=\"flex flex-col items-center\">\n//                 <button\n//                   onClick={() =>\n//                     !seat.isDisabled &&\n//                     !seat.isBooked &&\n//                     handleSeatClick(seat.id)\n//                   }\n//                   className={`h-16 w-16 rounded-md flex items-center justify-center text-lg font-semibold ${\n//                     seat.isSelected\n//                       ? \"bg-blue-600 text-white\"\n//                       : seat.isBooked\n//                       ? \"bg-red-600 text-white\"\n//                       : \"bg-white text-blue-600 border-2 border-blue-600\"\n//                   } ${\n//                     seat.isDisabled || seat.isBooked\n//                       ? \"opacity-50 cursor-not-allowed\"\n//                       : \"hover:bg-blue-100\"\n//                   }`}\n//                   disabled={seat.isDisabled || seat.isBooked}\n//                 >\n//                   {seat.id}\n//                 </button>\n//                 {!seat.isBooked && !seat.isDisabled && (\n//                   <span className=\"mt-2 text-sm text-gray-600\">\n//                     Rs. {seat.price}\n//                   </span>\n//                 )}\n//               </div>\n//             ))}\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   </div>\n\n//   {/* Modal */}\n//   {showModal && (\n//     <div className=\"fixed inset-0 bg-black bg-opacity-60 backdrop-blur-sm flex items-center justify-center z-50\">\n//       <div className=\"bg-white w-11/12 max-w-3xl rounded-xl shadow-2xl p-8 relative animate-fade-in\">\n//         {/* Close Button */}\n//         <button\n//           onClick={closeModal}\n//           className=\"absolute top-3 right-3 text-gray-700 hover:text-gray-900 bg-gray-200 rounded-full p-2 shadow transition hover:scale-110\"\n//         >\n//           &times;\n//         </button>\n\n//         <h3 className=\"text-2xl font-bold text-gray-800 mb-6 border-b pb-2\">\n//           Booking Details\n//         </h3>\n\n//         {/* Main Passenger Details */}\n//         {mainPassenger && passengers[mainPassenger] && (\n//           <div className=\"bg-gray-100 p-4 rounded-md mb-6\">\n//             <h4 className=\"text-xl font-semibold text-gray-700 mb-3\">\n//               Main Passenger Details\n//             </h4>\n//             <p className=\"text-gray-600\">\n//               <span className=\"font-semibold\">Name:</span>{\" \"}\n//               {passengers[mainPassenger].name}\n//             </p>\n//             <p className=\"text-gray-600\">\n//               <span className=\"font-semibold\">Email:</span>{\" \"}\n//               {passengers[mainPassenger].email}\n//             </p>\n//             <p className=\"text-gray-600\">\n//               <span className=\"font-semibold\">Phone:</span>{\" \"}\n//               {passengers[mainPassenger].phone}\n//             </p>\n//           </div>\n//         )}\n\n//         {/* Other Passengers Details */}\n//         {Object.entries(passengers)\n//           .filter(([seatId]) => seatId !== mainPassenger)\n//           .map(([seatId, passenger]) => (\n//             <div key={seatId} className=\"bg-gray-50 p-4 rounded-md mb-4\">\n//               <h4 className=\"text-lg font-semibold text-gray-700 mb-2\">\n//                 Passenger for Seat {seatId}\n//               </h4>\n//               <p className=\"text-gray-600\">\n//                 <span className=\"font-semibold\">Name:</span>{\" \"}\n//                 {passenger.name || \"N/A\"}\n//               </p>\n//             </div>\n//           ))}\n\n//         <div className=\"space-y-3\">\n//           <p className=\"text-gray-600\">\n//             <span className=\"font-semibold\">From Location:</span> Delhi\n//           </p>\n//           <p className=\"text-gray-600\">\n//             <span className=\"font-semibold\">To Location:</span> Mumbai\n//           </p>\n//           <p className=\"text-gray-600\">\n//             <span className=\"font-semibold\">Pickup Location:</span> Rajiv Chowk\n//           </p>\n//           <p className=\"text-gray-600\">\n//             <span className=\"font-semibold\">Drop Location:</span> Andheri West\n//           </p>\n//           <p className=\"text-gray-600\">\n//             <span className=\"font-semibold\">Date of Trip:</span>{\" \"}\n//             {new Date().toLocaleDateString()}\n//           </p>\n//           <p className=\"text-gray-600\">\n//             <span className=\"font-semibold\">Seats Booked:</span>{\" \"}\n//             {selectedSeats.map((seat) => seat.id).join(\", \")}\n//           </p>\n//           <p className=\"text-gray-600 text-lg font-medium\">\n//             <span className=\"font-semibold\">Total Amount Payable:</span> Rs.{\" \"}\n//             {totalAmount}\n//           </p>\n//         </div>\n\n//         <button\n//           onClick={handlePayment}\n//           className=\"mt-6 w-full py-3 px-6 bg-blue-600 text-white text-lg font-medium rounded-lg shadow-md hover:bg-blue-700 transition duration-300\"\n//         >\n//           Pay Now\n//         </button>\n//       </div>\n//     </div>\n//   )}\n// </div>\n\n//     </>\n//   );\n// };\n\n// export default SeatList;","map":{"version":3,"names":[],"sources":["D:/user-side/user-side/src/Seats/SeatList.jsx"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import { useNavigate } from 'react-router-dom';\r\n// import SelectedCarDetails from './SelectedCarDetails';\r\n// import TripDetailsCard from '../Listpage/TripDetailsCard';\r\n\r\n// // SeatList Component\r\n// const SeatList = () => {\r\n//   const [seats, setSeats] = useState([\r\n//     { id: 'L1', isSelected: false, isDisabled: false, isBooked: false, price: 1200 },\r\n//     { id: 'R1', isSelected: false, isDisabled: true, isBooked: false, price: 1200 },\r\n//     { id: 'L2', isSelected: false, isDisabled: false, isBooked: false, price: 1200 },\r\n//     { id: 'R2', isSelected: false, isDisabled: false, isBooked: false, price: 1200 },\r\n//     { id: 'L3', isSelected: false, isDisabled: false, isBooked: true, price: 1200 },\r\n//     { id: 'R3', isSelected: false, isDisabled: false, isBooked: false, price: 1200 },\r\n//   ]);\r\n\r\n//   const [passengers, setPassengers] = useState({});\r\n//   const [mainPassenger, setMainPassenger] = useState(null);\r\n//   const [showModal, setShowModal] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n//   const navigate = useNavigate();\r\n\r\n//   // Payment Handling\r\n//   const handlePayment = async () => {\r\n//     if (!window.Razorpay) {\r\n//       alert('Razorpay is not loaded properly!');\r\n//       return;\r\n//     }\r\n\r\n//     const response = await fetch('http://localhost:5000/api/payments/create-order', {\r\n//       method: 'POST',\r\n//       headers: { 'Content-Type': 'application/json' },\r\n//       body: JSON.stringify({ totalAmount }),\r\n//     });\r\n\r\n//     const order = await response.json();\r\n//     if (!order?.id) {\r\n//       alert('Failed to create order');\r\n//       return;\r\n//     }\r\n\r\n//     const options = {\r\n//       key: 'rzp_test_vqDlqzfsth2zPW',\r\n//       amount: totalAmount * 100,\r\n//       currency: 'INR',\r\n//       name: 'The CabS',\r\n//       description: 'Booking Details',\r\n//       order_id: order.id,\r\n//       handler: async (response) => {\r\n//         const paymentDetails = {\r\n//           paymentId: response.razorpay_payment_id,\r\n//           orderId: response.razorpay_order_id,\r\n//           signature: response.razorpay_signature,\r\n//           paymentDetails: {\r\n//             method: 'Razorpay',\r\n//             status: 'success',\r\n//             amount: totalAmount,\r\n//             mainPassenger: passengers[mainPassenger],\r\n//             seatsBooked: selectedSeats,\r\n//             tripDetails: {\r\n//               fromLocation: 'Delhi',\r\n//               toLocation: 'Mumbai',\r\n//               pickupLocation: 'Rajiv Chowk',\r\n//               dropLocation: 'Andheri West',\r\n//               dateOfTrip: new Date(),\r\n//             },\r\n//           },\r\n//         };\r\n\r\n//         const captureResponse = await fetch('http://localhost:5000/api/payments/capture-payment', {\r\n//           method: 'POST',\r\n//           headers: { 'Content-Type': 'application/json' },\r\n//           body: JSON.stringify(paymentDetails),\r\n//         });\r\n\r\n//         const result = await captureResponse.json();\r\n//         alert(result.success ? 'Payment successful' : 'Payment failed');\r\n//       },\r\n//       prefill: { name: 'Customer Name', email: 'customer@example.com', contact: '1234567890' },\r\n//       theme: { color: '#F37254' },\r\n//     };\r\n\r\n//     const rzp1 = new window.Razorpay(options);\r\n//     rzp1.open();\r\n//   };\r\n\r\n//   const handleSeatClick = (id) => {\r\n//     setSeats((prevSeats) =>\r\n//       prevSeats.map((seat) =>\r\n//         seat.id === id ? { ...seat, isSelected: !seat.isSelected } : seat\r\n//       )\r\n//     );\r\n\r\n//     setPassengers((prevPassengers) => {\r\n//       const updatedPassengers = { ...prevPassengers };\r\n//       if (updatedPassengers[id]) delete updatedPassengers[id];\r\n//       else updatedPassengers[id] = { name: '', email: '', phone: '', isMain: false };\r\n//       return updatedPassengers;\r\n//     });\r\n//   };\r\n\r\n//   const handleMainPassengerChange = (seatId) => {\r\n//     setMainPassenger((prevMain) => (prevMain === seatId ? null : seatId));\r\n//     setPassengers((prevPassengers) => {\r\n//       const updatedPassengers = { ...prevPassengers };\r\n//       Object.keys(updatedPassengers).forEach((id) => {\r\n//         updatedPassengers[id].isMain = id === seatId && seatId !== mainPassenger;\r\n//       });\r\n//       return updatedPassengers;\r\n//     });\r\n//   };\r\n\r\n//   const handleSubmit = (e) => {\r\n//     e.preventDefault();\r\n//     if (!mainPassenger) {\r\n//       setError('There Should be an One Main Passenger ! Please Fill.');\r\n//       return;\r\n//     }\r\n//     setError(null);\r\n//     setShowModal(true);\r\n//   };\r\n\r\n//   const closeModal = () => {\r\n//     setShowModal(false);\r\n//     navigate('/Seats');\r\n//   };\r\n\r\n//   const selectedSeats = seats.filter((seat) => seat.isSelected);\r\n//   const totalAmount = selectedSeats.reduce((sum, seat) => sum + seat.price, 0);\r\n\r\n//   return (\r\n//     <>\r\n//     <div className=\"flex justify-center p-4 w-full\">\r\n//   {/* Main Container */}\r\n//   <div className=\"flex flex-col md:flex-row gap-8 w-[85%]\">\r\n//     {/* First Div */}\r\n//     <div className=\"flex-[7] bg-white shadow-md rounded-lg overflow-hidden\">\r\n//       <SelectedCarDetails />\r\n//     </div>\r\n\r\n//     {/* Second Div */}\r\n//     <div className=\"flex-[3] shadow-md rounded-lg overflow-hidden\">\r\n//       <TripDetailsCard />\r\n//       <div className=\"p-4\">\r\n//         <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n//           {Object.entries(passengers).map(([seatId, passenger]) => (\r\n//             <div key={seatId} className=\"space-y-2\">\r\n//               <label\r\n//                 htmlFor={`name-${seatId}`}\r\n//                 className=\"block text-sm font-medium text-gray-700\"\r\n//               >\r\n//                 Passenger Name for Seat {seatId}\r\n//               </label>\r\n//               <input\r\n//                 type=\"text\"\r\n//                 id={`name-${seatId}`}\r\n//                 value={passenger.name}\r\n//                 onChange={(e) =>\r\n//                   setPassengers((prev) => ({\r\n//                     ...prev,\r\n//                     [seatId]: { ...prev[seatId], name: e.target.value },\r\n//                   }))\r\n//                 }\r\n//                 required\r\n//                 className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50\"\r\n//               />\r\n//               <label className=\"inline-flex items-center mt-2\">\r\n//                 <input\r\n//                   type=\"checkbox\"\r\n//                   checked={mainPassenger === seatId}\r\n//                   onChange={() => handleMainPassengerChange(seatId)}\r\n//                   className=\"form-checkbox text-blue-600\"\r\n//                 />\r\n//                 <span className=\"ml-2 text-sm text-gray-700\">\r\n//                   Set as Main Passenger\r\n//                 </span>\r\n//               </label>\r\n//               {mainPassenger === seatId && (\r\n//                 <div className=\"mt-2\">\r\n//                   <label\r\n//                     htmlFor={`email-${seatId}`}\r\n//                     className=\"block text-sm font-medium text-gray-700\"\r\n//                   >\r\n//                     Email\r\n//                   </label>\r\n//                   <input\r\n//                     type=\"email\"\r\n//                     id={`email-${seatId}`}\r\n//                     value={passenger.email}\r\n//                     onChange={(e) =>\r\n//                       setPassengers((prev) => ({\r\n//                         ...prev,\r\n//                         [seatId]: {\r\n//                           ...prev[seatId],\r\n//                           email: e.target.value,\r\n//                         },\r\n//                       }))\r\n//                     }\r\n//                     required\r\n//                     className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50\"\r\n//                   />\r\n//                   <label\r\n//                     htmlFor={`phone-${seatId}`}\r\n//                     className=\"block text-sm font-medium text-gray-700 mt-2\"\r\n//                   >\r\n//                     Phone Number\r\n//                   </label>\r\n//                   <input\r\n//                     type=\"tel\"\r\n//                     id={`phone-${seatId}`}\r\n//                     value={passenger.phone}\r\n//                     onChange={(e) =>\r\n//                       setPassengers((prev) => ({\r\n//                         ...prev,\r\n//                         [seatId]: {\r\n//                           ...prev[seatId],\r\n//                           phone: e.target.value,\r\n//                         },\r\n//                       }))\r\n//                     }\r\n//                     required\r\n//                     className=\"mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50\"\r\n//                   />\r\n//                 </div>\r\n//               )}\r\n//             </div>\r\n//           ))}\r\n\r\n//           {/* Error Message */}\r\n//           {error && (\r\n//             <div className=\"text-red-600 text-sm font-medium\">{error}</div>\r\n//           )}\r\n\r\n//           {/* No Seats Selected Message */}\r\n//           {selectedSeats.length === 0 && (\r\n//             <div className=\"bg-yellow-100 text-yellow-700 border border-yellow-400 rounded-md p-2 text-center\">\r\n//               Please select the seats for the trip.\r\n//             </div>\r\n//           )}\r\n\r\n//           {selectedSeats.length > 0 && (\r\n//             <button\r\n//               type=\"submit\"\r\n//               className=\"w-full py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\r\n//             >\r\n//               Book Seats\r\n//             </button>\r\n//           )}\r\n//         </form>\r\n//       </div>\r\n//       <div className=\"flex-1 bg-white shadow-md rounded-lg overflow-hidden\">\r\n//         <div className=\"bg-gray-100 px-4 py-2\">\r\n//           <h2 className=\"text-lg font-semibold\">Select Seats</h2>\r\n//         </div>\r\n//         <div className=\"p-4\">\r\n//           <div className=\"grid grid-rows-3 grid-cols-2 gap-4\">\r\n//             {seats.map((seat) => (\r\n//               <div key={seat.id} className=\"flex flex-col items-center\">\r\n//                 <button\r\n//                   onClick={() =>\r\n//                     !seat.isDisabled &&\r\n//                     !seat.isBooked &&\r\n//                     handleSeatClick(seat.id)\r\n//                   }\r\n//                   className={`h-16 w-16 rounded-md flex items-center justify-center text-lg font-semibold ${\r\n//                     seat.isSelected\r\n//                       ? \"bg-blue-600 text-white\"\r\n//                       : seat.isBooked\r\n//                       ? \"bg-red-600 text-white\"\r\n//                       : \"bg-white text-blue-600 border-2 border-blue-600\"\r\n//                   } ${\r\n//                     seat.isDisabled || seat.isBooked\r\n//                       ? \"opacity-50 cursor-not-allowed\"\r\n//                       : \"hover:bg-blue-100\"\r\n//                   }`}\r\n//                   disabled={seat.isDisabled || seat.isBooked}\r\n//                 >\r\n//                   {seat.id}\r\n//                 </button>\r\n//                 {!seat.isBooked && !seat.isDisabled && (\r\n//                   <span className=\"mt-2 text-sm text-gray-600\">\r\n//                     Rs. {seat.price}\r\n//                   </span>\r\n//                 )}\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   </div>\r\n\r\n//   {/* Modal */}\r\n//   {showModal && (\r\n//     <div className=\"fixed inset-0 bg-black bg-opacity-60 backdrop-blur-sm flex items-center justify-center z-50\">\r\n//       <div className=\"bg-white w-11/12 max-w-3xl rounded-xl shadow-2xl p-8 relative animate-fade-in\">\r\n//         {/* Close Button */}\r\n//         <button\r\n//           onClick={closeModal}\r\n//           className=\"absolute top-3 right-3 text-gray-700 hover:text-gray-900 bg-gray-200 rounded-full p-2 shadow transition hover:scale-110\"\r\n//         >\r\n//           &times;\r\n//         </button>\r\n\r\n//         <h3 className=\"text-2xl font-bold text-gray-800 mb-6 border-b pb-2\">\r\n//           Booking Details\r\n//         </h3>\r\n\r\n//         {/* Main Passenger Details */}\r\n//         {mainPassenger && passengers[mainPassenger] && (\r\n//           <div className=\"bg-gray-100 p-4 rounded-md mb-6\">\r\n//             <h4 className=\"text-xl font-semibold text-gray-700 mb-3\">\r\n//               Main Passenger Details\r\n//             </h4>\r\n//             <p className=\"text-gray-600\">\r\n//               <span className=\"font-semibold\">Name:</span>{\" \"}\r\n//               {passengers[mainPassenger].name}\r\n//             </p>\r\n//             <p className=\"text-gray-600\">\r\n//               <span className=\"font-semibold\">Email:</span>{\" \"}\r\n//               {passengers[mainPassenger].email}\r\n//             </p>\r\n//             <p className=\"text-gray-600\">\r\n//               <span className=\"font-semibold\">Phone:</span>{\" \"}\r\n//               {passengers[mainPassenger].phone}\r\n//             </p>\r\n//           </div>\r\n//         )}\r\n\r\n//         {/* Other Passengers Details */}\r\n//         {Object.entries(passengers)\r\n//           .filter(([seatId]) => seatId !== mainPassenger)\r\n//           .map(([seatId, passenger]) => (\r\n//             <div key={seatId} className=\"bg-gray-50 p-4 rounded-md mb-4\">\r\n//               <h4 className=\"text-lg font-semibold text-gray-700 mb-2\">\r\n//                 Passenger for Seat {seatId}\r\n//               </h4>\r\n//               <p className=\"text-gray-600\">\r\n//                 <span className=\"font-semibold\">Name:</span>{\" \"}\r\n//                 {passenger.name || \"N/A\"}\r\n//               </p>\r\n//             </div>\r\n//           ))}\r\n\r\n//         <div className=\"space-y-3\">\r\n//           <p className=\"text-gray-600\">\r\n//             <span className=\"font-semibold\">From Location:</span> Delhi\r\n//           </p>\r\n//           <p className=\"text-gray-600\">\r\n//             <span className=\"font-semibold\">To Location:</span> Mumbai\r\n//           </p>\r\n//           <p className=\"text-gray-600\">\r\n//             <span className=\"font-semibold\">Pickup Location:</span> Rajiv Chowk\r\n//           </p>\r\n//           <p className=\"text-gray-600\">\r\n//             <span className=\"font-semibold\">Drop Location:</span> Andheri West\r\n//           </p>\r\n//           <p className=\"text-gray-600\">\r\n//             <span className=\"font-semibold\">Date of Trip:</span>{\" \"}\r\n//             {new Date().toLocaleDateString()}\r\n//           </p>\r\n//           <p className=\"text-gray-600\">\r\n//             <span className=\"font-semibold\">Seats Booked:</span>{\" \"}\r\n//             {selectedSeats.map((seat) => seat.id).join(\", \")}\r\n//           </p>\r\n//           <p className=\"text-gray-600 text-lg font-medium\">\r\n//             <span className=\"font-semibold\">Total Amount Payable:</span> Rs.{\" \"}\r\n//             {totalAmount}\r\n//           </p>\r\n//         </div>\r\n\r\n//         <button\r\n//           onClick={handlePayment}\r\n//           className=\"mt-6 w-full py-3 px-6 bg-blue-600 text-white text-lg font-medium rounded-lg shadow-md hover:bg-blue-700 transition duration-300\"\r\n//         >\r\n//           Pay Now\r\n//         </button>\r\n//       </div>\r\n//     </div>\r\n//   )}\r\n// </div>\r\n\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default SeatList;\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}