{"ast":null,"code":"var _s = $RefreshSig$();\n// import React from 'react'\nimport React, { useState } from \"react\";\n// import { useDispatch } from \"react-redux\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport TermsandCondition from \"../UserProfile/TermsandCondition\";\nimport { Fragment as _Fragment, jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Signup = () => {\n  _s();\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    phone_number: \"\"\n  });\n  const navigate = useNavigate();\n  //   const dispatch = useDispatch();\n  const [alertMessage, setAlertMessage] = useState(\"\");\n  const [showAlert, setShowAlert] = useState(false);\n  const handleChange = e => {\n    const {\n      id,\n      value\n    } = e.target;\n    setFormData(prevData => ({\n      ...prevData,\n      [id]: value\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Check for empty fields\n    if (!formData.name || !formData.email || !formData.phone_number) {\n      setAlertMessage(\"Please fill out all fields.\");\n      setShowAlert(true);\n\n      // Hide alert after 5 seconds\n      setTimeout(() => setShowAlert(false), 5000);\n      return; // Exit early if fields are empty\n    }\n    formData.email = formData === null || formData === void 0 ? void 0 : formData.email.toLowerCase();\n    try {\n      // Dispatch the createinfluencers action\n      //   await dispatch(createinfluencers(formData));\n\n      navigate(\"/signin\");\n\n      // No need to show component's alert, API will handle notifications\n    } catch (error) {\n      // Optionally log the error for debugging\n      console.error(\"API Error:\", error);\n\n      // No need to show error alert, API will handle notifications\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n};\n_s(Signup, \"7f9ticyP/z+5UVFqXJ0R0xEva8E=\", false, function () {\n  return [useNavigate];\n});\n_c = Signup;\nexport default Signup;\nvar _c;\n$RefreshReg$(_c, \"Signup\");","map":{"version":3,"names":["React","useState","Link","useNavigate","TermsandCondition","Fragment","_Fragment","jsxDEV","_jsxDEV","Signup","_s","formData","setFormData","name","email","phone_number","navigate","alertMessage","setAlertMessage","showAlert","setShowAlert","handleChange","e","id","value","target","prevData","handleSubmit","preventDefault","setTimeout","toLowerCase","error","console","_c","$RefreshReg$"],"sources":["D:/user-side/user-side/src/Register/Signup.js"],"sourcesContent":["// import React from 'react'\r\nimport React, { useState } from \"react\";\r\n// import { useDispatch } from \"react-redux\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport TermsandCondition from \"../UserProfile/TermsandCondition\";\r\n\r\nconst Signup = () => {\r\n\r\n    const [formData, setFormData] = useState({\r\n        name: \"\",\r\n        email: \"\",\r\n        phone_number: \"\",\r\n      });\r\n      const navigate = useNavigate();\r\n    //   const dispatch = useDispatch();\r\n      const [alertMessage, setAlertMessage] = useState(\"\");\r\n      const [showAlert, setShowAlert] = useState(false);\r\n    \r\n      const handleChange = (e) => {\r\n        const { id, value } = e.target;\r\n        setFormData((prevData) => ({\r\n          ...prevData,\r\n          [id]: value,\r\n        }));\r\n      };\r\n    \r\n      const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n      \r\n        // Check for empty fields\r\n        if (!formData.name || !formData.email || !formData.phone_number) {\r\n          setAlertMessage(\"Please fill out all fields.\");\r\n          setShowAlert(true);\r\n      \r\n          // Hide alert after 5 seconds\r\n          setTimeout(() => setShowAlert(false), 5000);\r\n          return; // Exit early if fields are empty\r\n        }\r\n    \r\n        formData.email= formData?.email.toLowerCase()\r\n      \r\n        try {\r\n          // Dispatch the createinfluencers action\r\n        //   await dispatch(createinfluencers(formData));\r\n    \r\n          navigate(\"/signin\")\r\n      \r\n          // No need to show component's alert, API will handle notifications\r\n        } catch (error) {\r\n          // Optionally log the error for debugging\r\n          console.error(\"API Error:\", error);\r\n      \r\n          // No need to show error alert, API will handle notifications\r\n        }\r\n      };\r\n  return (\r\n<>\r\n</>\r\n\r\n  )\r\n}\r\n\r\nexport default Signup\r\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC;AACA,SAASC,IAAI,EAAEC,WAAW,QAAQ,kBAAkB;AACpD,OAAOC,iBAAiB,MAAM,kCAAkC;AAAC,SAAAC,QAAA,IAAAC,SAAA,EAAAC,MAAA,IAAAC,OAAA;AAEjE,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEjB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC;IACrCY,IAAI,EAAE,EAAE;IACRC,KAAK,EAAE,EAAE;IACTC,YAAY,EAAE;EAChB,CAAC,CAAC;EACF,MAAMC,QAAQ,GAAGb,WAAW,CAAC,CAAC;EAChC;EACE,MAAM,CAACc,YAAY,EAAEC,eAAe,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACkB,SAAS,EAAEC,YAAY,CAAC,GAAGnB,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAMoB,YAAY,GAAIC,CAAC,IAAK;IAC1B,MAAM;MAAEC,EAAE;MAAEC;IAAM,CAAC,GAAGF,CAAC,CAACG,MAAM;IAC9Bb,WAAW,CAAEc,QAAQ,KAAM;MACzB,GAAGA,QAAQ;MACX,CAACH,EAAE,GAAGC;IACR,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAMG,YAAY,GAAG,MAAOL,CAAC,IAAK;IAChCA,CAAC,CAACM,cAAc,CAAC,CAAC;;IAElB;IACA,IAAI,CAACjB,QAAQ,CAACE,IAAI,IAAI,CAACF,QAAQ,CAACG,KAAK,IAAI,CAACH,QAAQ,CAACI,YAAY,EAAE;MAC/DG,eAAe,CAAC,6BAA6B,CAAC;MAC9CE,YAAY,CAAC,IAAI,CAAC;;MAElB;MACAS,UAAU,CAAC,MAAMT,YAAY,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC;MAC3C,OAAO,CAAC;IACV;IAEAT,QAAQ,CAACG,KAAK,GAAEH,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEG,KAAK,CAACgB,WAAW,CAAC,CAAC;IAE7C,IAAI;MACF;MACF;;MAEEd,QAAQ,CAAC,SAAS,CAAC;;MAEnB;IACF,CAAC,CAAC,OAAOe,KAAK,EAAE;MACd;MACAC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;;MAElC;IACF;EACF,CAAC;EACL,oBACFvB,OAAA,CAAAF,SAAA,mBACE,CAAC;AAGH,CAAC;AAAAI,EAAA,CAtDKD,MAAM;EAAA,QAOWN,WAAW;AAAA;AAAA8B,EAAA,GAP5BxB,MAAM;AAwDZ,eAAeA,MAAM;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}